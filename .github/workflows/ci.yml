name: CI validation

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  cpp:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        compiler:
          - name: gcc 9
            cc: gcc-9
            cxx: g++-9
            libcpp: libstdc++11
          - name: clang 11
            cc: clang-11
            cxx: clang++-11
            libcpp: libc++
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      CONAN_RUN_TESTS: 1
      CONAN_SYSREQUIRES_MODE: enabled # Conan can install stuff
    steps:
      - uses: actions/checkout@v1
      # Alternatively: uses: docker://conanio/gcc9:latest
      - name: Update package list
        run: |
          sudo apt-get update
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install conan
        run: |
          pip install -U --no-cache-dir conan
          conan profile new default --detect
          echo "conan profile update settings.compiler.libcxx=${{ matrix.compiler.libcpp }} default"
          conan profile update settings.compiler.libcxx=${{ matrix.compiler.libcpp }} default
          if [[ "libc++" == "${{ matrix.compiler.libcpp }}" ]]; then
            echo "conan config set tools.build.cxxflags=\"-I/usr/lib/llvm-11/include/c++/v1\""
            conan config set tools.build.cxxflags="-I/usr/lib/llvm-11/include/c++/v1"
          fi
      - name: Cache conan dependencies
        uses: actions/cache@v2
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-conan-${{ matrix.compiler.name }}-${{ hashFiles('conanfile.py') }}-${{ hashFiles('conan/*') }}
          restore-keys: |
            - ${{ runner.os }}-conan-${{ matrix.compiler.name }}-
      - name: Install Dependencies from Conan
        run: |
          conan install . --install-folder build --profile conan/dev --build missing
      - name: Build and Test
        run: |
          cat build/conan_toolchain.cmake
          cat build/CMakePresets.json
          cmake . \
            -B build \
            -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake \
            -DCMAKE_VERBOSE_MAKEFILE=1 \
            -DWITH_AVCODEC=yes
          cmake --build build -j$(nproc)
          ctest --test-dir build
      - name: Cleanup
        # Remove build directories before creating a cache.
        run: |
          conan remove 'gerbera/*' --force --builds --system-reqs

  head-check:
    runs-on: ubuntu-latest
    container:
      image: "ubuntu:22.04"
      env:
        DEBIAN_FRONTEND: noninteractive
        TZ: Etc/UTC
    steps:
      - name: Install script pre-reqs
        shell: bash
        run: |
          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
          apt-get update -y
          apt-get install -y lsb-release sudo wget curl git

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # We need history/tags to generate version info

      - name: Build and upload deb
        run: |
          bash scripts/debian/build-deb.sh HEAD
